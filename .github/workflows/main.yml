name: Builder Connect

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Build
        working-directory: ./builder_connect
        run: cargo build --verbose
      - name: Run tests
        working-directory: ./builder_connect
        run: cargo test --verbose

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        working-directory: ./builder_connect_ui
        run: npm install
      - name: Build
        working-directory: ./builder_connect_ui
        run: npm run build

  docker:
    needs: backend
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        # uses: docker/bake-action@v4
        with:
          file: ./builder_connect/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/builder-connect:latest
          # set: |
          #   *.cache-from=type=gha
          #   *.cache-to=type=gha,mode=max

  deploy:
    needs: [frontend, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install sshpass
        run: sudo apt-get install sshpass
      - name: Copy docker-compose.yml to droplet
        run: sshpass -v -p ${{ secrets.DROPLET_PASSWORD }} scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ secrets.DROPLET_IP }}:~
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            export MONGOURI=${{ secrets.MONGOURI }}
            export HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}
            export HUGGING_FACE_API_URL=${{ secrets.HUGGING_FACE_API_URL }}
            export GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
            export GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
            export GOOGLE_OAUTH_TOKEN_URL=${{ secrets.GOOGLE_OAUTH_TOKEN_URL }}
            export GOOGLE_OAUTH_AUTH_URL=${{ secrets.GOOGLE_OAUTH_AUTH_URL }}
            export GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }}
            export DISCORD_OAUTH_TOKEN_URL=${{ secrets.DISCORD_OAUTH_TOKEN_URL }}
            export DISCORD_OAUTH_AUTH_URL=${{ secrets.DISCORD_OAUTH_AUTH_URL }}
            export DISCORD_OAUTH_CLIENT_ID=${{ secrets.DISCORD_OAUTH_CLIENT_ID }}
            export DISCORD_OAUTH_CLIENT_SECRET=${{ secrets.DISCORD_OAUTH_CLIENT_SECRET }}
            export DISCORD_OAUTH_REDIRECT_URL=${{ secrets.DISCORD_OAUTH_REDIRECT_URL }}
            export BUILDWORK_EMAIL=${{ secrets.BUILDWORK_EMAIL }}
            export BUILDWORK_EMAIL_PASSWORD=${{ secrets.BUILDWORK_EMAIL_PASSWORD }}
            export PRODUCTION_URL=${{ secrets.PRODUCTION_URL }}
            export LOCALHOST=${{ secrets.LOCALHOST }}
            export IN_PRODUCTION=${{ secrets.IN_PRODUCTION }}
            docker-compose down
            docker-compose pull
            docker-compose up -d
